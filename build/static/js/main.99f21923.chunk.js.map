{"version":3,"sources":["components/Buttons.js","components/FocusIndicator.js","components/PlayAgain.js","components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Buttons","react_default","a","createElement","className","onClick","this","props","handleBtnPress","Component","FocusIndicator","PlayAgain","resetGame","Square","val","type","Board","_this","uniqKeyGen","count","counter","squares","board","map","row","rowIndex","current","columnIndex","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","snakeCoords","Symbol","iterator","next","done","_ref5","value","_ref2","Object","slicedToArray","coorRow","coorCol","src_components_Square","key","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","foodCoords","_ref6","_ref4","headCoords","DEFAULT_STATE","intervalId","isPlaying","isTurnTaken","isFood","direction","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","focusOnApp","appRef","focus","handleKeyPress","_ref","keyCode","includes","setState","e","btnName","target","innerText","componentDidUpdate","addFood","newFoodCoord","randomNum","isCollision","console","log","prevState","toConsumableArray","concat","moveSnake","_this$state","newHeadCoords","boardHeight","length","boardWidth","prevHeadCoords","newsnakeCoords","push","shift","React","createRef","_this2","setInterval","clearInterval","itemCoord","snakeBody","some","coor","onKeyDown","tabIndex","ref","src_components_Board","src_components_FocusIndicator","src_components_Buttons","src_components_PlayAgain","start","end","Math","floor","random","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uWAwBeA,0LAnBX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBC,QAASC,KAAKC,MAAMC,gBAAxD,MAGAP,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBC,QAASC,KAAKC,MAAMC,gBAAxD,QAGAP,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBC,QAASC,KAAKC,MAAMC,gBAAxD,QAGAP,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBC,QAASC,KAAKC,MAAMC,gBAAxD,iBAbcC,cCWPC,gMATX,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBALMK,cCadE,0LAXX,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMC,QAASC,KAAKC,MAAMK,WAA5C,uBALgBH,qBCiBTI,0LAhBJ,IAEHC,EADEC,EAAST,KAAKC,MAAdQ,KAWN,MATa,UAATA,EACFD,EAAMb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACH,UAATW,EACTD,EAAMb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,SACY,SAATW,EACTD,EAAMb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,QACY,SAATW,IACTD,EAAMb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,SAEDU,SAbUL,cC+BNO,0LA7BJ,IAAAC,EAAAX,KACHY,EA8BR,WACE,IAAIC,EAAQ,EACZ,OAAO,WAEL,OADAA,GAAS,GAjCQC,GACXC,EAAUf,KAAKC,MAAMe,MAAMC,IAAI,SAACC,EAAKC,GACzC,OAAOD,EAAID,IAAI,SAACG,EAASC,GAAgB,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IACvC,QAAAC,EAAAC,EAA+BhB,EAAKV,MAAM2B,YAA1CC,OAAAC,cAAAR,GAAAI,EAAAC,EAAAI,QAAAC,MAAAV,GAAA,EAAuD,KAAAW,EAAAP,EAAAQ,MAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAA7CK,EAA6CH,EAAA,GAApCI,EAAoCJ,EAAA,GACrD,GAAIG,IAAYnB,GAAYoB,IAAYlB,EACtC,OAAO1B,EAAAC,EAAAC,cAAC2C,EAAD,CAAQC,IAAK7B,IAAcH,KAAK,WAHJ,MAAAiC,GAAAnB,GAAA,EAAAC,EAAAkB,EAAA,YAAApB,GAAA,MAAAK,EAAAgB,QAAAhB,EAAAgB,SAAA,WAAApB,EAAA,MAAAC,GAAA,IAAAoB,GAAA,EAAAC,GAAA,EAAAC,OAAArB,EAAA,IAMvC,QAAAsB,EAAAC,EAA+BrC,EAAKV,MAAMgD,WAA1CpB,OAAAC,cAAAc,GAAAG,EAAAC,EAAAjB,QAAAC,MAAAY,GAAA,EAAsD,KAAAM,EAAAH,EAAAb,MAAAiB,EAAAf,OAAAC,EAAA,EAAAD,CAAAc,EAAA,GAA5CZ,EAA4Ca,EAAA,GAAnCZ,EAAmCY,EAAA,GACpD,GAAIb,IAAYnB,GAAYoB,IAAYlB,EACtC,OAAO1B,EAAAC,EAAAC,cAAC2C,EAAD,CAAQC,IAAK7B,IAAcH,KAAK,UARJ,MAAAiC,GAAAG,GAAA,EAAAC,EAAAJ,EAAA,YAAAE,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,GAWvC,OACEnC,EAAKV,MAAMmD,WAAW,KAAOjC,GAC7BR,EAAKV,MAAMmD,WAAW,KAAO/B,EAEtB1B,EAAAC,EAAAC,cAAC2C,EAAD,CAAQC,IAAK7B,IAAcH,KAAK,SAGlCd,EAAAC,EAAAC,cAAC2C,EAAD,CAAQC,IAAK7B,IAAcH,KAAK,cAI3C,OAAOd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASiB,UA1BfZ,cCGpB,IAAMkD,EAAgB,CACpBC,WAAY,KACZC,WAAW,EACXC,aAAa,EACbC,QAAQ,EACRzC,MAAO,CACL,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAErBoC,WAAY,CAAC,EAAG,GAChBxB,YAAa,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,IAClCqB,WAAY,GACZS,UAAW,QAwKEC,cArKb,SAAAA,EAAY1D,GAAO,IAAAU,EAAA,OAAAyB,OAAAwB,EAAA,EAAAxB,CAAApC,KAAA2D,IACjBhD,EAAAyB,OAAAyB,EAAA,EAAAzB,CAAApC,KAAAoC,OAAA0B,EAAA,EAAA1B,CAAAuB,GAAAI,KAAA/D,KAAMC,KAIR+D,MAAQX,EALW1C,EAOnBsD,WAAa,WACXtD,EAAKuD,OAAO9C,QAAQ+C,SARHxD,EAyBnByD,eAAiB,SAAAC,GAAiB,IAAdC,EAAcD,EAAdC,QACZZ,EAAc/C,EAAKqD,MAAnBN,UACF,CAAC,GAAI,IAAIa,SAASD,IAA0B,UAAdZ,EAChC/C,EAAK6D,SAAS,CAAEd,UAAW,SAClB,CAAC,GAAI,IAAIa,SAASD,IAA0B,SAAdZ,EACvC/C,EAAK6D,SAAS,CAAEd,UAAW,OAClB,CAAC,GAAI,IAAIa,SAASD,IAA0B,SAAdZ,EACvC/C,EAAK6D,SAAS,CAAEd,UAAW,UAClB,CAAC,GAAI,IAAIa,SAASD,IAA0B,OAAdZ,GACvC/C,EAAK6D,SAAS,CAAEd,UAAW,UAlCZ/C,EAsCnBT,eAAiB,SAAAuE,GAAK,IACdf,EAAc/C,EAAKqD,MAAnBN,UACFgB,EAAUD,EAAEE,OAAOC,UACP,OAAZF,GAAkC,SAAdhB,EACtB/C,EAAK6D,SAAS,CAAEd,UAAW,OACN,SAAZgB,GAAoC,OAAdhB,EAC/B/C,EAAK6D,SAAS,CAAEd,UAAW,SACN,SAAZgB,GAAoC,UAAdhB,EAC/B/C,EAAK6D,SAAS,CAAEd,UAAW,SACN,UAAZgB,GAAqC,SAAdhB,GAChC/C,EAAK6D,SAAS,CAAEd,UAAW,WAhDZ/C,EAoDnBL,UAAY,WACVK,EAAK6D,SAASnB,IArDG1C,EAwDnBkE,mBAAqB,WACnBlE,EAAKsD,cAzDYtD,EA4DnBmE,QAAU,WAGR,IAHc,IACRlD,EAAgBjB,EAAKqD,MAArBpC,YACFmD,EAAe,CAACC,EAAU,EAAG,GAAIA,EAAU,EAAG,IAC3CrE,EAAKsE,YAAYF,EAAcnD,IACpCsD,QAAQC,IAAI,4BACZJ,EAAe,CAACC,EAAU,EAAG,GAAIA,EAAU,EAAG,IAEhDrE,EAAK6D,SAAS,SAAAY,GAAS,MAAK,CAC1BnC,WAAWb,OAAAiD,EAAA,EAAAjD,CAAKgD,EAAUnC,YAAhBqC,OAAA,CAA4BP,IACtCtB,QAAQ,MArEO9C,EAyEnB4E,UAAY,WAAM,IAAAC,EACwB7E,EAAKqD,MAAvChD,EADUwE,EACVxE,MAAOiC,EADGuC,EACHvC,WAAYG,EADToC,EACSpC,WACrBqC,EAAarD,OAAAiD,EAAA,EAAAjD,CAAOgB,GACpBsC,EAAc1E,EAAM2E,OACpBC,EAAa5E,EAAM,GAAG2E,OAEG,UAAzBhF,EAAKqD,MAAMN,WAAyBN,EAAW,KAAOwC,EAAa,EACrEH,EAAc,GAAK,EACe,UAAzB9E,EAAKqD,MAAMN,UACpB+B,EAAc,IAAM,EACc,SAAzB9E,EAAKqD,MAAMN,WAA6C,IAArB+B,EAAc,GAC1DA,EAAc,GAAKG,EAAa,EACE,SAAzBjF,EAAKqD,MAAMN,UACpB+B,EAAc,IAAM,EAEK,SAAzB9E,EAAKqD,MAAMN,WACX+B,EAAc,KAAOC,EAAc,EAEnCD,EAAc,GAAK,EACe,SAAzB9E,EAAKqD,MAAMN,UACpB+B,EAAc,IAAM,EACc,OAAzB9E,EAAKqD,MAAMN,WAA2C,IAArB+B,EAAc,GACxDA,EAAc,GAAKC,EAAc,EACC,OAAzB/E,EAAKqD,MAAMN,YACpB+B,EAAc,IAAM,GAEtB9E,EAAK6D,SAAS,SAAAY,GACZ,IAAIS,EAAczD,OAAAiD,EAAA,EAAAjD,CAAOgD,EAAUhC,YAC/B0C,EAAc1D,OAAAiD,EAAA,EAAAjD,CAAOgD,EAAUxD,aAEnC,OAAIjB,EAAKsE,YAAYQ,EAAexC,IAClC6C,EAAeC,KAAKF,GACb,CACLzC,WAAYqC,EACZ7D,YAAakE,EACb7C,WAAY,GACZO,aAAa,EACbC,QAAQ,KAGZqC,EAAeE,QACXrF,EAAKsE,YAAYQ,EAAeK,IAClCZ,QAAQC,IAAI,UACL,CAAE5B,WAAW,KAEtBuC,EAAeC,KAAKF,GACb,CACLzC,WAAYqC,EACZ7D,YAAakE,EACbtC,aAAa,OAGZ7C,EAAKqD,MAAMP,QACd9C,EAAKmE,WA5HPnE,EAAKuD,OAAS+B,IAAMC,YAFHvF,mFAWC,IAAAwF,EAAAnG,KACdsD,EAAa8C,YAAY,WAC3BD,EAAKZ,aACJ,KACHvF,KAAKwE,SAAS,CAAElB,eAChB4B,QAAQC,IAAI,aAAc7B,GAC1BtD,KAAK8E,UACL9E,KAAKiE,4DAILoC,cAAcrG,KAAKgE,MAAMV,gDA4GfgD,EAAWC,GACrB,OAAOA,EAAUC,KAAK,SAAAC,GACpB,OAAOA,EAAK,KAAOH,EAAU,IAAMG,EAAK,KAAOH,EAAU,sCAK3D,OACE3G,EAAAC,EAAAC,cAAA,OACEC,UAAU,MACV4G,UAAW1G,KAAKoE,eAChBuC,SAAS,IACTC,IAAK5G,KAAKkE,QAETlE,KAAKgE,MAAMT,UACV5D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACgH,EAAD,CACEzD,WAAYpD,KAAKgE,MAAMZ,WACvBpC,MAAOhB,KAAKgE,MAAMhD,MAClBY,YAAa5B,KAAKgE,MAAMpC,YACxBqB,WAAYjD,KAAKgE,MAAMf,aAEzBtD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAACiH,EAAD,MACAnH,EAAAC,EAAAC,cAACkH,EAAD,CAAS7G,eAAgBF,KAAKE,mBAIlCP,EAAAC,EAAAC,cAACmH,EAAD,CAAW1G,UAAWN,KAAKM,oBA/JnBH,aAyKlB,SAAS6E,EAAUiC,EAAOC,GAExB,OADYC,KAAKC,MAAMD,KAAKE,SAAWH,GAAOD,ECxL5BK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjI,EAAAC,EAAAC,cAACgI,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.99f21923.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Buttons.css';\n\nclass Buttons extends Component {\n  render() {\n    return (\n      <div className=\"buttons-container\">\n        <button className=\"btn btn-primary\" onClick={this.props.handleBtnPress}>\n          Up\n        </button>\n        <button className=\"btn btn-primary\" onClick={this.props.handleBtnPress}>\n          Down\n        </button>\n        <button className=\"btn btn-primary\" onClick={this.props.handleBtnPress}>\n          Left\n        </button>\n        <button className=\"btn btn-primary\" onClick={this.props.handleBtnPress}>\n          Right\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Buttons;\n","import React, { Component } from 'react';\nimport './FocusIndicator.css';\n\nclass FocusIndicator extends Component {\n  render() {\n    return (\n      <div className=\"focus-indicator\">\n        <p>Game Has Focus?</p>\n        <div className=\"focus\" />\n      </div>\n    );\n  }\n}\n\nexport default FocusIndicator;\n","import React, { Component } from 'react';\nimport './PlayAgain.css';\n\nclass PlayAgain extends Component {\n  render() {\n    return (\n      <div className=\"play-again\">\n        <p>GAME OVER</p>\n        <button className=\"btn\" onClick={this.props.resetGame}>\n          Play Again?\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default PlayAgain;\n","import React, { Component } from 'react';\nimport './Square.css';\n\nclass Square extends Component {\n  render() {\n    let { type } = this.props;\n    let val;\n    if (type === 'empty') {\n      val = <div className=\"square\" />;\n    } else if (type === 'snake') {\n      val = <div className=\"square snake\">Snake</div>;\n    } else if (type === 'head') {\n      val = <div className=\"square head\">Head</div>;\n    } else if (type === 'food') {\n      val = <div className=\"square food\">Food</div>;\n    }\n    return val;\n  }\n}\n\nexport default Square;\n","import React, { Component } from 'react';\nimport Square from './Square';\nimport './Board.css';\n\nclass Board extends Component {\n  render() {\n    let uniqKeyGen = counter();\n    const squares = this.props.board.map((row, rowIndex) => {\n      return row.map((current, columnIndex) => {\n        for (let [coorRow, coorCol] of this.props.snakeCoords) {\n          if (coorRow === rowIndex && coorCol === columnIndex) {\n            return <Square key={uniqKeyGen()} type=\"snake\" />;\n          }\n        }\n        for (let [coorRow, coorCol] of this.props.foodCoords) {\n          if (coorRow === rowIndex && coorCol === columnIndex) {\n            return <Square key={uniqKeyGen()} type=\"food\" />;\n          }\n        }\n        if (\n          this.props.headCoords[0] === rowIndex &&\n          this.props.headCoords[1] === columnIndex\n        ) {\n          return <Square key={uniqKeyGen()} type=\"head\" />;\n        }\n\n        return <Square key={uniqKeyGen()} type=\"empty\" />;\n      });\n    });\n\n    return <div className=\"Board\">{squares}</div>;\n  }\n}\n\nexport default Board;\n\nfunction counter() {\n  let count = 0;\n  return function inner() {\n    count += 1;\n    return count;\n  };\n}\n","import React, { Component } from 'react';\nimport Buttons from './components/Buttons';\nimport './App.css';\nimport FocusIndicator from './components/FocusIndicator';\nimport PlayAgain from './components/PlayAgain';\nimport Board from './components/Board';\n\nconst DEFAULT_STATE = {\n  intervalId: null,\n  isPlaying: true,\n  isTurnTaken: false,\n  isFood: false,\n  board: [\n    [0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0]\n  ],\n  headCoords: [1, 3],\n  snakeCoords: [[1, 0], [1, 1], [1, 2]],\n  foodCoords: [],\n  direction: 'down'\n};\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.appRef = React.createRef();\n  }\n\n  state = DEFAULT_STATE;\n\n  focusOnApp = () => {\n    this.appRef.current.focus();\n  };\n\n  componentDidMount() {\n    let intervalId = setInterval(() => {\n      this.moveSnake();\n    }, 1000);\n    this.setState({ intervalId });\n    console.log('intervalId', intervalId);\n    this.addFood();\n    this.focusOnApp();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.state.intervalId);\n  }\n\n  handleKeyPress = ({ keyCode }) => {\n    let { direction } = this.state;\n    if ([65, 37].includes(keyCode) && direction !== 'right') {\n      this.setState({ direction: 'left' });\n    } else if ([87, 38].includes(keyCode) && direction !== 'down') {\n      this.setState({ direction: 'up' });\n    } else if ([68, 39].includes(keyCode) && direction !== 'left') {\n      this.setState({ direction: 'right' });\n    } else if ([83, 40].includes(keyCode) && direction !== 'up') {\n      this.setState({ direction: 'down' });\n    }\n  };\n\n  handleBtnPress = e => {\n    let { direction } = this.state;\n    let btnName = e.target.innerText;\n    if (btnName === 'Up' && direction !== 'down') {\n      this.setState({ direction: 'up' });\n    } else if (btnName === 'Down' && direction !== 'up') {\n      this.setState({ direction: 'down' });\n    } else if (btnName === 'Left' && direction !== 'right') {\n      this.setState({ direction: 'left' });\n    } else if (btnName === 'Right' && direction !== 'left') {\n      this.setState({ direction: 'right' });\n    }\n  };\n\n  resetGame = () => {\n    this.setState(DEFAULT_STATE);\n  };\n\n  componentDidUpdate = () => {\n    this.focusOnApp();\n  };\n\n  addFood = () => {\n    let { snakeCoords } = this.state;\n    let newFoodCoord = [randomNum(0, 7), randomNum(0, 7)];\n    while (this.isCollision(newFoodCoord, snakeCoords)) {\n      console.log('food overlaps with snake');\n      newFoodCoord = [randomNum(0, 7), randomNum(0, 7)];\n    }\n    this.setState(prevState => ({\n      foodCoords: [...prevState.foodCoords, newFoodCoord],\n      isFood: true\n    }));\n  };\n\n  moveSnake = () => {\n    let { board, foodCoords, headCoords } = this.state;\n    let newHeadCoords = [...headCoords];\n    let boardHeight = board.length;\n    let boardWidth = board[0].length;\n    //move snake, go to other side of board if at end of board\n    if (this.state.direction === 'right' && headCoords[1] === boardWidth - 1) {\n      newHeadCoords[1] = 0;\n    } else if (this.state.direction === 'right') {\n      newHeadCoords[1] += 1;\n    } else if (this.state.direction === 'left' && newHeadCoords[1] === 0) {\n      newHeadCoords[1] = boardWidth - 1;\n    } else if (this.state.direction === 'left') {\n      newHeadCoords[1] -= 1;\n    } else if (\n      this.state.direction === 'down' &&\n      newHeadCoords[0] === boardHeight - 1\n    ) {\n      newHeadCoords[0] = 0;\n    } else if (this.state.direction === 'down') {\n      newHeadCoords[0] += 1;\n    } else if (this.state.direction === 'up' && newHeadCoords[0] === 0) {\n      newHeadCoords[0] = boardHeight - 1;\n    } else if (this.state.direction === 'up') {\n      newHeadCoords[0] -= 1;\n    }\n    this.setState(prevState => {\n      let prevHeadCoords = [...prevState.headCoords];\n      let newsnakeCoords = [...prevState.snakeCoords];\n      // this conditional only works with one piece of food\n      if (this.isCollision(newHeadCoords, foodCoords)) {\n        newsnakeCoords.push(prevHeadCoords);\n        return {\n          headCoords: newHeadCoords,\n          snakeCoords: newsnakeCoords,\n          foodCoords: [],\n          isTurnTaken: true,\n          isFood: false\n        };\n      }\n      newsnakeCoords.shift();\n      if (this.isCollision(newHeadCoords, newsnakeCoords)) {\n        console.log('MURDER');\n        return { isPlaying: false };\n      }\n      newsnakeCoords.push(prevHeadCoords);\n      return {\n        headCoords: newHeadCoords,\n        snakeCoords: newsnakeCoords,\n        isTurnTaken: true\n      };\n    });\n    if (!this.state.isFood) {\n      this.addFood();\n    }\n  };\n\n  isCollision(itemCoord, snakeBody) {\n    return snakeBody.some(coor => {\n      return coor[0] === itemCoord[0] && coor[1] === itemCoord[1];\n    });\n  }\n\n  render() {\n    return (\n      <div\n        className=\"App\"\n        onKeyDown={this.handleKeyPress}\n        tabIndex=\"0\"\n        ref={this.appRef}\n      >\n        {this.state.isPlaying ? (\n          <div>\n            <Board\n              headCoords={this.state.headCoords}\n              board={this.state.board}\n              snakeCoords={this.state.snakeCoords}\n              foodCoords={this.state.foodCoords}\n            />\n            <div className=\"user-feedback-container\">\n              <FocusIndicator />\n              <Buttons handleBtnPress={this.handleBtnPress} />\n            </div>\n          </div>\n        ) : (\n          <PlayAgain resetGame={this.resetGame} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n//includes start, excludes end\nfunction randomNum(start, end) {\n  const num = Math.floor(Math.random() * end) + start;\n  return num;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}