{"version":3,"sources":["components/Square.js","components/Buttons.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","val","type","this","props","react_default","a","createElement","className","Component","Buttons","onClick","handleBtnPress","DEFAULT_STATE","intervalId","isPlaying","isTurnTaken","isFood","board","snakeCoordinates","foodCoords","direction","Board","state","handleKeyPress","_ref","keyCode","includes","_this","setState","e","btnName","target","innerText","resetGame","addFood","newFoodCoord","randomNum","isCollision","console","log","prevState","Object","toConsumableArray","concat","moveSnake","_this$state","boardHeight","length","boardWidth","headCoordinate","newSnakeCoordinates","push","shift","_this2","setInterval","clearInterval","itemCoord","snakeBody","some","coor","_this3","uniqKeyGen","count","counter","squares","map","row","rowIndex","current","columnIndex","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","_ref6","value","_ref3","slicedToArray","coorRow","coorCol","src_components_Square","key","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_ref7","_ref5","onKeyDown","tabIndex","components_Buttons","start","end","Math","floor","random","App","src_components_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e038d885.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Square.css';\n\nclass Square extends Component {\n  render() {\n    let { type } = this.props;\n    let val;\n    if (type === 'empty') {\n      val = <div className=\"square\" />;\n    } else if (type === 'snake') {\n      val = <div className=\"square snake\">Snake</div>;\n    } else if (type === 'food') {\n      val = <div className=\"square food\">Food</div>;\n    }\n    return val;\n  }\n}\n\nexport default Square;\n","import React, {Component} from 'react'\n\nclass Buttons extends Component {\n    render() {\n        return (\n            <div>\n                <button onClick={this.props.handleBtnPress}>Up</button>\n                <button onClick={this.props.handleBtnPress}>Down</button>\n                <button onClick={this.props.handleBtnPress}>Left</button>\n                <button onClick={this.props.handleBtnPress}>Right</button>\n            </div>\n\n        )\n    }\n}\n\nexport default Buttons;\n","import React, { Component } from 'react';\nimport Square from './Square';\nimport Buttons from './Buttons';\nimport './Board.css';\n\nconst DEFAULT_STATE = {\n  intervalId: null,\n  isPlaying: true,\n  isTurnTaken: false,\n  isFood: false,\n  board: [\n    [0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0]\n  ],\n  snakeCoordinates: [[1, 0], [1, 1], [1, 2], [1, 3]],\n  foodCoords: [],\n  direction: 'down'\n};\nclass Board extends Component {\n  state = DEFAULT_STATE;\n\n  componentDidMount() {\n    let intervalId = setInterval(() => {\n      this.moveSnake();\n    }, 1000);\n    this.setState({ intervalId });\n    console.log('intervalId', intervalId);\n    this.addFood();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.state.intervalId);\n  }\n\n  handleKeyPress = ({ keyCode }) => {\n    if ([65, 37].includes(keyCode)) {\n      this.setState({ direction: 'left' });\n    } else if ([87, 38].includes(keyCode)) {\n      this.setState({ direction: 'up' });\n    } else if ([68, 39].includes(keyCode)) {\n      this.setState({ direction: 'right' });\n    } else if ([83, 40].includes(keyCode)) {\n      this.setState({ direction: 'down' });\n    }\n  };\n\n  handleBtnPress = e => {\n    let btnName = e.target.innerText;\n    if (btnName === 'Up') {\n      this.setState({ direction: 'up' });\n    } else if (btnName === 'Down') {\n      this.setState({ direction: 'down' });\n    } else if (btnName === 'Left') {\n      this.setState({ direction: 'left' });\n    } else if (btnName === 'Right') {\n      this.setState({ direction: 'right' });\n    }\n  };\n\n  resetGame = () => {\n    this.setState(DEFAULT_STATE);\n  };\n\n  addFood = () => {\n    let { snakeCoordinates } = this.state;\n    let newFoodCoord = [randomNum(0, 7), randomNum(0, 7)];\n    while (this.isCollision(newFoodCoord, snakeCoordinates)) {\n      console.log('food overlaps with snake');\n      newFoodCoord = [randomNum(0, 7), randomNum(0, 7)];\n    }\n    this.setState(prevState => ({\n      foodCoords: [...prevState.foodCoords, newFoodCoord],\n      isFood: true\n    }));\n  };\n\n  moveSnake = () => {\n    let { snakeCoordinates, board, foodCoords } = this.state;\n    let boardHeight = board.length;\n    let boardWidth = board[0].length;\n    let headCoordinate = [...snakeCoordinates[snakeCoordinates.length - 1]];\n    //move snake, go to other side of board if at end of board\n    if (\n      this.state.direction === 'right' &&\n      headCoordinate[1] === boardWidth - 1\n    ) {\n      headCoordinate[1] = 0;\n    } else if (this.state.direction === 'right') {\n      headCoordinate[1] += 1;\n    } else if (this.state.direction === 'left' && headCoordinate[1] === 0) {\n      headCoordinate[1] = boardWidth - 1;\n    } else if (this.state.direction === 'left') {\n      headCoordinate[1] -= 1;\n    } else if (\n      this.state.direction === 'down' &&\n      headCoordinate[0] === boardHeight - 1\n    ) {\n      headCoordinate[0] = 0;\n    } else if (this.state.direction === 'down') {\n      headCoordinate[0] += 1;\n    } else if (this.state.direction === 'up' && headCoordinate[0] === 0) {\n      headCoordinate[0] = boardHeight - 1;\n    } else if (this.state.direction === 'up') {\n      headCoordinate[0] -= 1;\n    }\n    this.setState(prevState => {\n      let newSnakeCoordinates = [...prevState.snakeCoordinates];\n      // this conditional only works with one piece of food\n      if (this.isCollision(headCoordinate, foodCoords)) {\n        newSnakeCoordinates.push(headCoordinate);\n        return {\n          snakeCoordinates: newSnakeCoordinates,\n          foodCoords: [],\n          isTurnTaken: true,\n          isFood: false\n        };\n      }\n      newSnakeCoordinates.shift();\n      if (this.isCollision(headCoordinate, newSnakeCoordinates)) {\n        console.log('MURDER');\n        return { isPlaying: false };\n      }\n      newSnakeCoordinates.push(headCoordinate);\n      return { snakeCoordinates: newSnakeCoordinates, isTurnTaken: true };\n    });\n    if (!this.state.isFood) {\n      this.addFood();\n    }\n  };\n\n  isCollision(itemCoord, snakeBody) {\n    return snakeBody.some(coor => {\n      return coor[0] === itemCoord[0] && coor[1] === itemCoord[1];\n    });\n  }\n\n  render() {\n    if (!this.state.isPlaying) {\n      return (\n        <div>\n          <p>GAME OVER</p>\n          <button onClick={this.resetGame}>Play Again?</button>\n        </div>\n      );\n    }\n    let uniqKeyGen = counter();\n    const squares = this.state.board.map((row, rowIndex) => {\n      return row.map((current, columnIndex) => {\n        for (let [coorRow, coorCol] of this.state.snakeCoordinates) {\n          if (coorRow === rowIndex && coorCol === columnIndex) {\n            return <Square key={uniqKeyGen()} type=\"snake\" />;\n          }\n        }\n        for (let [coorRow, coorCol] of this.state.foodCoords) {\n          if (coorRow === rowIndex && coorCol === columnIndex) {\n            return <Square key={uniqKeyGen()} type=\"food\" />;\n          }\n        }\n\n        return <Square key={uniqKeyGen()} type=\"empty\" />;\n      });\n    });\n\n    return (\n      <div className=\"Board\" onKeyDown={this.handleKeyPress} tabIndex=\"0\">\n        {squares}\n        <Buttons handleBtnPress={this.handleBtnPress} />\n      </div>\n    );\n  }\n}\n\nexport default Board;\n\nfunction counter() {\n  let count = 0;\n  return function inner() {\n    count += 1;\n    return count;\n  };\n}\n\n//includes start, excludes end\nfunction randomNum(start, end) {\n  const num = Math.floor(Math.random() * end) + start;\n  return num;\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Board from './components/Board';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}